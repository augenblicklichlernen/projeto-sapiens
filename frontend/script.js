// =================================================================================
// ARQUIVO script.js (VERSÃO DE ESTABILIDADE MÁXIMA)
// =================================================================================
const API_URL = 'https://sapiens-backend-ogz2.onrender.com';
let token = localStorage.getItem('token');
let userId = localStorage.getItem('userId');
let ytPlayer;

function showView(viewId) { document.querySelectorAll('.view').forEach(v => v.classList.remove('active')); document.getElementById(viewId)?.classList.add('active'); }
function scrollToElement(element) { if (element) element.scrollIntoView({ behavior: 'smooth', block: 'center' }); }

async function handleLogin(e) { e.preventDefault(); const username = document.getElementById('login-username').value; const password = document.getElementById('login-password').value; try { const res = await fetch(`${API_URL}/api/auth/login`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ username, password }) }); const data = await res.json(); if (!res.ok) throw new Error(data.message); localStorage.setItem('token', data.token); localStorage.setItem('username', data.username); localStorage.setItem('userId', data.userId); initializeApp(); } catch (error) { alert(`Erro no login: ${error.message}`); } }
async function handleRegister(e) { e.preventDefault(); const username = document.getElementById('register-username').value; const password = document.getElementById('register-password').value; try { const res = await fetch(`${API_URL}/api/auth/register`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ username, password }) }); if (!res.ok) { const err = await res.json(); throw new Error(err.message); } alert('Registro bem-sucedido! Faça o login.'); showView('login-view'); } catch (error) { alert(`Erro no registro: ${error.message}`); } }

function setupUserAreaAndScores() {
    const userArea = document.getElementById('user-area');
    userArea.innerHTML = `<span>Olá, ${localStorage.getItem('username')}!</span><button id="logout-button">Sair</button>`;
    document.getElementById('logout-button').addEventListener('click', () => { localStorage.clear(); window.location.reload(); });
    const scoreContainer = document.getElementById('score-bar-container');
    if (scoreContainer) scoreContainer.style.display = 'flex';
    document.getElementById('score-toggle-btn')?.addEventListener('click', () => { const panel = document.getElementById('score-panel'); panel.classList.toggle('visible'); if (panel.classList.contains('visible')) updateScores(); });
    const certsButtonContainer = document.querySelector('.header-right-group');
    if (certsButtonContainer && !document.getElementById('my-certs-btn')) {
        const certButton = document.createElement('button');
        certButton.id = 'my-certs-btn';
        certButton.textContent = 'Meus Certificados';
        certButton.onclick = loadCertificates;
        scoreContainer.insertAdjacentElement('afterend', certButton);
    }
}
async function updateScores() { try { const res = await fetch(`${API_URL}/api/content/scores/user/${userId}`, { headers: { 'Authorization': `Bearer ${token}` } }); if (!res.ok) throw new Error('Falha ao buscar scores'); const scores = await res.json(); const scoreList = document.getElementById('score-list'); scoreList.innerHTML = ''; scores.forEach(score => { const percentage = score.total_lessons > 0 ? ((score.user_score / score.total_lessons) * 100).toFixed(0) : 0; scoreList.innerHTML += `<li><span class="score-name" style="color:${score.color_hex};">${score.name}</span><span class="score-value">${score.user_score}/${score.total_lessons} (${percentage}%)</span></li>`; }); } catch(error) { console.error("Erro ao atualizar scores:", error); } }
async function fetchSubjects() { const subjectsGrid = document.getElementById('subjects-grid'); if (!subjectsGrid) return; try { const response = await fetch(`${API_URL}/api/content/subjects`, { headers: { 'Authorization': `Bearer ${token}` } }); if (!response.ok) throw new Error('Falha ao buscar matérias.'); const subjects = await response.json(); while (subjectsGrid.firstChild) { subjectsGrid.removeChild(subjectsGrid.firstChild); } if (!Array.isArray(subjects) || subjects.length === 0) { subjectsGrid.innerHTML = '<p>Nenhuma matéria cadastrada.</p>'; return; } subjects.forEach(subject => { const card = document.createElement('div'); card.className = 'subject-card'; card.style.setProperty('--subject-color', subject.color_hex); card.innerHTML = `<h3>${subject.name}</h3>`; card.addEventListener('click', () => loadLessons(subject.id, subject.name)); subjectsGrid.appendChild(card); }); } catch (error) { console.error('Erro em fetchSubjects:', error); subjectsGrid.innerHTML = '<p>Erro ao carregar matérias.</p>'; } }
async function loadLessons(subjectId, subjectName) { const lessonView = document.getElementById('lesson-view'); showView('lesson-view'); lessonView.innerHTML = '<h2>Carregando...</h2>'; try { const response = await fetch(`${API_URL}/api/content/lessons/${subjectId}`); if (!response.ok) throw new Error('Falha ao buscar lições.'); const lessons = await response.json(); let title = subjectName ? `<h2>${subjectName}</h2>` : ''; let backBtn = `<button class="back-btn" onclick="showView('subjects-view')">← Voltar</button>`; if (lessons.length === 0) { lessonView.innerHTML = `${backBtn}${title}<h2>Nenhuma lição disponível.</h2>`; return; } lessonView.innerHTML = `${backBtn}${title}<ul class="lesson-list"></ul>`; const lessonList = lessonView.querySelector('.lesson-list'); lessons.forEach(lesson => { const item = document.createElement('li'); item.className = 'lesson-item'; item.innerHTML = `<span>Lição ${lesson.lesson_order}: ${lesson.title}</span><button class="start-lesson-btn" data-lesson-id="${lesson.id}">Iniciar</button>`; lessonList.appendChild(item); }); } catch (error) { console.error('Erro em loadLessons:', error); lessonView.innerHTML = `<h2>Erro.</h2><p>${error.message}</p>`; } }
async function renderLessonContent(lessonId) { const lessonView = document.getElementById('lesson-view'); showView('lesson-view'); lessonView.innerHTML = `<h2>Carregando...</h2>`; try { const res = await fetch(`${API_URL}/api/content/lesson-detail/${lessonId}`); const lesson = await res.json(); lessonView.innerHTML = `<button class="back-btn" onclick="loadLessons(${lesson.subject_id}, '')">← Voltar</button><div id="lesson-main-content"><h2>${lesson.title}</h2><div id="video-placeholder"></div><div id="post-video-content" style="display:none;"><hr><h3>Recursos</h3><img src="${lesson.image_url}" alt="Imagem" style="max-width:100%;"><br/><audio controls src="${lesson.audio_url}"></audio><br/><button id="show-text-btn">Ver Explicação</button></div><div id="text-content" style="display:none;"><hr><h3>Explicação</h3><div>${lesson.lesson_text}</div><button id="start-quiz-btn">Iniciar Questões</button></div></div><div id="quiz-content-wrapper" style="display:none;"></div>`; createYouTubePlayer(lesson); } catch (error) { lessonView.innerHTML = `<h2>Erro.</h2><p>${error.message}</p>`; } }
function createYouTubePlayer(lesson) { let interval; const videoId = new URL(lesson.video_url).searchParams.get('v'); ytPlayer = new YT.Player('video-placeholder', { height: '480', width: '100%', videoId: videoId, events: { 'onStateChange': e => { if (e.data === YT.PlayerState.PLAYING) { interval = setInterval(() => { const duration = ytPlayer.getDuration(); if (duration > 0 && (ytPlayer.getCurrentTime() / duration) >= 0.8) { showPostVideoContent(); clearInterval(interval); } }, 1000); } else { clearInterval(interval); } } } }); document.getElementById('show-text-btn')?.addEventListener('click', () => { const el = document.getElementById('text-content'); el.style.display = 'block'; scrollToElement(el); }); document.getElementById('start-quiz-btn')?.addEventListener('click', () => { document.getElementById('lesson-main-content').style.display = 'none'; renderQuiz(lesson); }); }
function showPostVideoContent() { const el = document.getElementById('post-video-content'); if (el.style.display === 'none') { el.style.display = 'block'; scrollToElement(el); } }
async function renderQuiz(lesson) { console.log("Iniciando renderQuiz"); fetch(`${API_URL}/api/content/unlock-reinforcement`, { method: 'POST', headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` }, body: JSON.stringify({ userId, triggerLessonId: lesson.id }) }).then(res => res.json()).then(data => { if (data.unlocked) showReinforcementToast(data.title); }); const quizWrapper = document.getElementById('quiz-content-wrapper'); quizWrapper.style.display = 'block'; quizWrapper.innerHTML = '<div id="quiz-content"></div>'; const quizContent = document.getElementById('quiz-content'); scrollToElement(quizWrapper); let timerInterval, selectedOption = null; function startTimer(duration, display, onTimeUp) { let timer = duration; display.textContent = `Tempo: ${timer}s`; timerInterval = setInterval(() => { timer--; display.textContent = `Tempo: ${timer}s`; if (timer <= 0) { clearInterval(timerInterval); onTimeUp(); } }, 1000); } function showFeedback(isCorrect, explanation) { const feedbackDiv = document.createElement('div'); feedbackDiv.id = 'quiz-feedback'; feedbackDiv.className = isCorrect ? 'correct' : 'incorrect'; feedbackDiv.innerHTML = `<p>${explanation}</p><button id="next-question-btn"></button>`; const confirmBtn = quizContent.querySelector('#confirm-answer-btn'); if (confirmBtn) { confirmBtn.style.display = 'none'; confirmBtn.insertAdjacentElement('afterend', feedbackDiv); } return feedbackDiv.querySelector('#next-question-btn'); } async function handleAnswer(questionType, correctAnswer, selectedAnswerText, feedbackPrefix = '') { clearInterval(timerInterval); quizContent.querySelectorAll('.option-btn').forEach(btn => { btn.disabled = true; }); quizContent.querySelector('#confirm-answer-btn').disabled = true; const isCorrect = selectedAnswerText === correctAnswer; quizContent.querySelectorAll('.option-btn').forEach(btn => { if (btn.textContent === correctAnswer) btn.classList.add('correct'); if (btn === selectedOption && !isCorrect) btn.classList.add('incorrect'); }); if (questionType === 'q1') { const feedbackText = feedbackPrefix + (isCorrect ? " Correto! Este foi um treino." : " Incorreto. A resposta certa está em verde."); const nextBtn = showFeedback(isCorrect, feedbackText); nextBtn.textContent = "Iniciar Questão 2"; nextBtn.addEventListener('click', renderQuestion2); } else if (questionType === 'q2') { const res = await fetch(`${API_URL}/api/content/submit-quiz`, { method: 'POST', headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` }, body: JSON.stringify({ userId, lessonId: lesson.id, isCorrect }) }); const result = await res.json(); const nextBtn = showFeedback(isCorrect, feedbackPrefix + " " + result.message); if (result.status === 'completed') { nextBtn.textContent = "Ver Próxima Lição"; nextBtn.addEventListener('click', () => { updateScores(); loadLessons(lesson.subject_id, ''); }); } else if (result.status === 'subject_finished') { nextBtn.textContent = "Gerar Certificado"; nextBtn.addEventListener('click', () => handleSubjectFinished(result.subjectId)); } else { nextBtn.textContent = "Voltar ao Vídeo"; nextBtn.addEventListener('click', () => renderLessonContent(lesson.id)); } } } async function renderQuestion2() { /* ...código da Q2 como antes... */ } function renderQuestion1() { /* ...código da Q1 como antes... */ } renderQuestion1(); }
function showReinforcementToast(title) { /* ...código como antes... */ }
async function handleSubjectFinished(subjectId) { /* ...código como antes... */ }
async function loadCertificates() { /* ...código como antes... */ }
function showCertificate(cert) { /* ...código como antes... */ }

function initializeApp() {
    token = localStorage.getItem('token');
    userId = localStorage.getItem('userId');
    document.getElementById('show-register')?.addEventListener('click', e => { e.preventDefault(); showView('register-view'); });
    document.getElementById('show-login')?.addEventListener('click', e => { e.preventDefault(); showView('login-view'); });
    document.getElementById('login-form')?.addEventListener('submit', handleLogin);
    document.getElementById('register-form')?.addEventListener('submit', handleRegister);
    document.body.addEventListener('click', e => { if (e.target?.classList.contains('start-lesson-btn')) renderLessonContent(e.target.dataset.lessonId); });
    if (token && userId) {
        showView('subjects-view');
        fetchSubjects();
        setupUserAreaAndScores();
    } else {
        showView('login-view');
        document.getElementById('user-area').innerHTML = '<button id="login-button">Entrar</button>';
        document.getElementById('login-button')?.addEventListener('click', () => showView('login-view'));
    }
}
document.addEventListener('DOMContentLoaded', initializeApp);