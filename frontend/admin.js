const API_URL = 'https://sapiens-backend-ogz2.onrender.com';
document.addEventListener('DOMContentLoaded', () => { const f = document.getElementById('password-form'); if(f) f.addEventListener('submit', e => { e.preventDefault(); const i = document.getElementById('admin-password'); if (i.value === 'augensapien') { document.getElementById('password-overlay').style.display = 'none'; document.getElementById('admin-content').style.display = 'block'; initializeAdminPanel(); } else alert('Senha incorreta!'); }); });
function initializeAdminPanel() { setupEventListeners(); populateSubjects(); populateAllLessonsSelect(); loadManageableSubjects(); loadManageableLessons(); loadManageableUsers(); renderRfQuestionFields(5); }
function setupEventListeners() { document.getElementById('add-subject-form')?.addEventListener('submit', handleAddSubject); document.getElementById('add-lesson-form')?.addEventListener('submit', handleAddLesson); document.getElementById('add-reinforcement-form')?.addEventListener('submit', handleAddReinforcement); document.body.addEventListener('click', e => { if (e.target?.classList.contains('delete-btn')) deleteItem(e.target.dataset.type, e.target.dataset.id); }); }
async function handleAddSubject(e) { e.preventDefault(); const n = document.getElementById('subject-name').value, c = document.getElementById('subject-color').value, i = document.getElementById('subject-is-extra').checked, o = document.getElementById('subject-order-input').value; try { const res = await fetch(`${API_URL}/api/admin/subject`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name: n, color_hex: c, is_extra: i, subject_order: o }) }); const data = await res.json(); if (!res.ok) throw new Error(data.message); alert(`Matéria "${data.name}" criada.`); document.getElementById('add-subject-form').reset(); initializeAdminPanel(); } catch (err) { alert(`Erro: ${err.message}`); } }
async function handleAddLesson(e) { e.preventDefault(); try { const d = { subject_id: document.getElementById('select-subject').value, title: document.getElementById('lesson-title').value, lesson_order: document.getElementById('lesson-order').value, video_url: document.getElementById('video-url').value, image_url: document.getElementById('image-url').value, audio_url: document.getElementById('audio-url').value, lesson_text: document.getElementById('lesson-text').value, q1_time: document.getElementById('q1-time').value, q1_text: document.getElementById('q1-text').value, q1_options: Array.from(document.querySelectorAll('.q1-option')).map(i=>i.value), q2_time: document.getElementById('q2-time').value, q2_variants: [{ text: document.querySelectorAll('.q2-text')[0].value, options: Array.from(document.querySelectorAll('.q2-option-a')).map(i=>i.value) }, { text: document.querySelectorAll('.q2-text')[1].value, options: Array.from(document.querySelectorAll('.q2-option-b')).map(i=>i.value) }, { text: document.querySelectorAll('.q2-text')[2].value, options: Array.from(document.querySelectorAll('.q2-option-c')).map(i=>i.value) }] }; const res = await fetch(`${API_URL}/api/admin/lesson`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(d) }); const data = await res.json(); if (!res.ok) throw new Error(data.message); alert(`Lição "${data.title}" adicionada.`); document.getElementById('add-lesson-form').reset(); initializeAdminPanel(); } catch (err) { alert(`Erro: ${err.message}`); } }
async function handleAddReinforcement(e) { e.preventDefault(); try { const q = []; document.querySelectorAll('.rf-question-block').forEach(b => q.push({ text: b.querySelector('.rf-q-text').value, options: Array.from(b.querySelectorAll('.rf-q-option')).map(i=>i.value), time: b.querySelector('.rf-q-time').value })); const d = { title: document.getElementById('rf-title').value, trigger_lesson_id: document.getElementById('select-trigger-lesson').value, content: { video_url: document.getElementById('rf-video-url').value, image_url: document.getElementById('rf-image-url').value, audio_url: document.getElementById('rf-audio-url').value, text: document.getElementById('rf-text').value, questions: q } }; const res = await fetch(`${API_URL}/api/admin/reinforcement-lesson`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(d) }); const data = await res.json(); if (!res.ok) throw new Error(data.message); alert('Reforço criado.'); document.getElementById('add-reinforcement-form').reset(); } catch (err) { alert(`Erro: ${err.message}`); } }
async function populateSubjects() { const s = document.getElementById('select-subject'); if(!s) return; try { const res = await fetch(`${API_URL}/api/content/subjects`); const d = await res.json(); if (!res.ok) throw new Error(); const a = [...d.main, ...d.extra]; s.innerHTML=''; if(a.length===0) {s.innerHTML='<option value="">Cadastre matéria</option>'; return;} a.forEach(sub => s.innerHTML += `<option value="${sub.id}">${sub.name}</option>`); } catch(e) { s.innerHTML = '<option>Erro</option>'; } }
async function loadManageableSubjects() { const l = document.getElementById('manage-subjects-list'); if(!l) return; try { const res = await fetch(`${API_URL}/api/content/subjects`); const d = await res.json(); if (!res.ok) throw new Error(); const a = [...d.main, ...d.extra].sort((x,y) => x.subject_order - y.subject_order); l.innerHTML=''; if(a.length===0) { l.innerHTML='<p>Nenhuma matéria.</p>'; return; } a.forEach(s => l.innerHTML += `<div class="manage-item"><span>${s.subject_order}: ${s.name} ${s.is_extra?'(Extra)':''}</span><button class="delete-btn" data-id="${s.id}" data-type="subject">Excluir</button></div>`); } catch(e) { l.innerHTML = 'Erro ao carregar'; } }
async function loadManageableLessons() { const l = document.getElementById('manage-lessons-list'); if(!l) return; try { const res = await fetch(`${API_URL}/api/content/subjects`); const d = await res.json(); if (!res.ok) throw new Error(); const a = [...d.main, ...d.extra]; l.innerHTML=''; let hasL = false; for(const s of a) { const lessonsRes = await fetch(`${API_URL}/api/content/lessons/${s.id}`); const lessons = await lessonsRes.json(); if(lessons.length > 0) hasL = true; lessons.forEach(les => l.innerHTML += `<div class="manage-item"><span><strong>${s.name}:</strong> ${les.title}</span><button class="delete-btn" data-id="${les.id}" data-type="lesson">Excluir</button></div>`); } if (!hasL) l.innerHTML = '<p>Nenhuma lição.</p>'; } catch(e) { l.innerHTML = 'Erro ao carregar'; } }
async function loadManageableUsers() { const l = document.getElementById('manage-users-list'); if(!l) return; try { const res = await fetch(`${API_URL}/api/admin/users`, { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }); const u = await res.json(); if (!res.ok) throw new Error(); l.innerHTML=''; if(u.length===0) { l.innerHTML='<p>Nenhum usuário.</p>'; return; } u.forEach(user => l.innerHTML += `<div class="manage-item"><span>${user.username}</span><button class="delete-btn" data-id="${user.id}" data-type="user">Excluir</button></div>`); } catch(e) { l.innerHTML = 'Erro ao carregar'; } }
async function deleteItem(type, id) { if (!confirm(`TEM CERTEZA?`)) return; try { const res = await fetch(`${API_URL}/api/admin/${type}/${id}`, { method: 'DELETE' }); const data = await res.json(); if (!res.ok) throw new Error(data.message); alert(data.message); initializeAdminPanel(); } catch (err) { alert(`Erro: ${err.message}`); } }
async function populateAllLessonsSelect() { const s = document.getElementById('select-trigger-lesson'); if(!s) return; try { const res = await fetch(`${API_URL}/api/content/subjects`); const d = await res.json(); if (!res.ok) throw new Error(); const a = [...d.main, ...d.extra]; s.innerHTML = ''; for (const sub of a) { const og = document.createElement('optgroup'); og.label = sub.name; const lRes = await fetch(`${API_URL}/api/content/lessons/${sub.id}`); const lessons = await lRes.json(); lessons.forEach(l => og.innerHTML += `<option value="${l.id}">${l.title}</option>`); s.appendChild(og); } } catch (e) { console.error(e); } }
function renderRfQuestionFields(count) { const c = document.getElementById('rf-questions-container'); if (!c) return; c.innerHTML = '<legend>Questões de Treino</legend>'; for (let i = 1; i <= count; i++) { c.innerHTML += `<div class="rf-question-block"><h4>Questão ${i}</h4><label>Texto</label><textarea class="rf-q-text"></textarea><label>Tempo(s)</label><input type="number" class="rf-q-time" value="60"><label>5 Alternativas (1ª correta)</label><input class="rf-q-option" p="Correta"><input class="rf-q-option" p="Alt 2"><input class="rf-q-option" p="Alt 3"><input class="rf-q-option" p="Alt 4"><input class="rf-q-option" p="Alt 5"></div>`; } }